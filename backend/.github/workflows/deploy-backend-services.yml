name: Build and Deploy Backend Services

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY_PREFIX: "your-account-id.dkr.ecr.us-east-1.amazonaws.com"
  EKS_CLUSTER_NAME: "your-cluster-name"
  KUBERNETES_NAMESPACE: "time-series-indexing"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    strategy:
      matrix:
        service: [backfill, backtesting, recommendation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY_PREFIX }}/astrofinancial-${{ matrix.service }}-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build base image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/Dockerfile.base
          push: false
          tags: astrofinancial-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main'
        run: |
          # Update the deployment image
          kubectl set image deployment/${{ matrix.service }}-service \
            ${{ matrix.service }}-service=${{ env.ECR_REGISTRY_PREFIX }}/astrofinancial-${{ matrix.service }}-service:${{ github.sha }} \
            -n ${{ env.KUBERNETES_NAMESPACE }}

          # Wait for rollout to complete
          kubectl rollout status deployment/${{ matrix.service }}-service -n ${{ env.KUBERNETES_NAMESPACE }}

      - name: Verify deployment
        if: github.ref == 'refs/heads/main'
        run: |
          # Check if pods are running
          kubectl get pods -l app=${{ matrix.service }}-service -n ${{ env.KUBERNETES_NAMESPACE }}

          # Check service health endpoint
          POD_NAME=$(kubectl get pods -l app=${{ matrix.service }}-service -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')

          # Map service ports
          case ${{ matrix.service }} in
            backfill)
              PORT=8001
              ;;
            backtesting)
              PORT=8000
              ;;
            recommendation)
              PORT=8002
              ;;
          esac

          # Wait for pod to be ready
          kubectl wait --for=condition=Ready pod/$POD_NAME -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

          # Test health endpoint
          kubectl port-forward pod/$POD_NAME -n ${{ env.KUBERNETES_NAMESPACE }} $PORT:$PORT &
          PORT_FORWARD_PID=$!
          sleep 10

          # Check health endpoint
          curl -f http://localhost:$PORT/health || exit 1

          # Clean up port forward
          kill $PORT_FORWARD_PID

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ ${{ matrix.service }}-service deployed successfully"
          else
            echo "❌ ${{ matrix.service }}-service deployment failed"
            exit 1
          fi

  # Job to create ECR repositories if they don't exist
  setup-ecr-repos:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repositories
        run: |
          services=(backfill backtesting recommendation)
          for service in "${services[@]}"; do
            repo_name="astrofinancial-${service}-service"

            # Check if repository exists, create if it doesn't
            if ! aws ecr describe-repositories --repository-names $repo_name --region ${{ env.AWS_REGION }} 2>/dev/null; then
              echo "Creating ECR repository: $repo_name"
              aws ecr create-repository \
                --repository-name $repo_name \
                --region ${{ env.AWS_REGION }} \
                --image-scanning-configuration scanOnPush=true
            else
              echo "ECR repository $repo_name already exists"
            fi
          done