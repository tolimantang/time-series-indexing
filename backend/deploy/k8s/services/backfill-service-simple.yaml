---
# Simplified Backfill Service for quick deployment and testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backfill-service
  namespace: time-series-indexing
  labels:
    app: backfill-service
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backfill-service
  template:
    metadata:
      labels:
        app: backfill-service
        version: v1
    spec:
      containers:
      - name: backfill-service
        image: python:3.11-slim
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "🚀 Starting Simplified Backfill Service..."

            # Install minimal dependencies
            apt-get update && apt-get install -y \
              libpq-dev \
              gcc \
              curl \
              && rm -rf /var/lib/apt/lists/*

            # Install core Python dependencies
            pip install --no-cache-dir \
              fastapi==0.104.1 \
              uvicorn[standard]==0.24.0 \
              pydantic==2.5.0 \
              psycopg2-binary==2.9.9 \
              pandas \
              yfinance

            # Create app structure
            mkdir -p /app/services

            # Copy backfill service
            cp /source/backfill_service.py /app/services/

            # Create minimal fallback modules
            mkdir -p /app/market_encoder/core
            mkdir -p /app/astro_encoder/core

            cat > /app/market_encoder/__init__.py << 'EOF'
            # Market encoder package
            EOF

            cat > /app/market_encoder/core/__init__.py << 'EOF'
            # Market encoder core package
            EOF

            cat > /app/market_encoder/core/encoder.py << 'EOF'
            import pandas as pd
            import yfinance as yf

            class MarketEncoder:
                def __init__(self, **kwargs):
                    pass

                def fetch_market_data(self, symbol, start_date, end_date):
                    ticker = yf.Ticker(symbol)
                    return ticker.history(start=start_date, end=end_date)
            EOF

            cat > /app/astro_encoder/__init__.py << 'EOF'
            # Astro encoder package
            EOF

            cat > /app/astro_encoder/core/__init__.py << 'EOF'
            # Astro encoder core package
            EOF

            cat > /app/astro_encoder/core/encoder.py << 'EOF'
            from datetime import datetime, timedelta

            class AstroEncoder:
                def __init__(self):
                    pass

                def encode_date_range(self, start_date, end_date, location='universal'):
                    print(f"🌙 Astro encoding from {start_date} to {end_date} (simplified)")
                    return []  # Simplified: return empty list for now
            EOF

            # Verify service file exists
            if [ ! -f /app/services/backfill_service.py ]; then
              echo "❌ backfill_service.py not found"
              exit 1
            fi

            echo "✅ Simplified backfill service ready"
            echo "🌙 Starting on port 8001..."

            # Start the service
            cd /app/services
            python backfill_service.py

        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        - name: DB_PORT
          value: "5432"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        volumeMounts:
        - name: source-code
          mountPath: /source
          readOnly: true

      volumes:
      - name: source-code
        configMap:
          name: backfill-source-code

      restartPolicy: Always

---
# Service to expose the backfill service
apiVersion: v1
kind: Service
metadata:
  name: backfill-service
  namespace: time-series-indexing
  labels:
    app: backfill-service
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: backfill-service