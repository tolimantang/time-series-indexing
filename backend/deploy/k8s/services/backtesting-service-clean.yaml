---
# Clean deployment that runs existing backtesting_service.py file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backtesting-service
  namespace: time-series-indexing
  labels:
    app: backtesting-service
    version: v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backtesting-service
  template:
    metadata:
      labels:
        app: backtesting-service
        version: v2
    spec:
      initContainers:
      # Copy source code from local directory
      - name: copy-source
        image: alpine:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "📂 Copying source code..."
            # This would normally be done via git sync or volume mount
            # For local development, we'll create a minimal structure
            mkdir -p /app/services
            mkdir -p /app/llm_analyzer
            echo "✅ Directory structure created"
        volumeMounts:
        - name: app-volume
          mountPath: /app

      containers:
      - name: backtesting-service
        image: python:3.11-slim
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "🚀 Starting Real Backtesting Service..."

            # Install system dependencies
            apt-get update && apt-get install -y \
              libpq-dev \
              gcc \
              curl \
              git \
              && rm -rf /var/lib/apt/lists/*

            # Install Python dependencies
            pip install --no-cache-dir \
              fastapi==0.104.1 \
              uvicorn[standard]==0.24.0 \
              pydantic==2.5.0 \
              psycopg2-binary==2.9.9 \
              python-json-logger==2.0.7 \
              pandas \
              numpy

            # Copy the real service files
            echo "📋 Copying backtesting service code..."
            cat > /app/services/backtesting_service.py << 'EOF'
            $(cat /host-source/src/services/backtesting_service.py)
            EOF

            echo "📋 Copying enhanced daily lunar tester..."
            cat > /app/llm_analyzer/enhanced_daily_lunar_tester.py << 'EOF'
            $(cat /host-source/src/llm_analyzer/enhanced_daily_lunar_tester.py)
            EOF

            # Create __init__.py files
            touch /app/services/__init__.py
            touch /app/llm_analyzer/__init__.py

            # Verify files exist
            if [ ! -f /app/services/backtesting_service.py ]; then
              echo "❌ backtesting_service.py not found"
              exit 1
            fi

            if [ ! -f /app/llm_analyzer/enhanced_daily_lunar_tester.py ]; then
              echo "❌ enhanced_daily_lunar_tester.py not found"
              exit 1
            fi

            # Start the service
            echo "🌙 Starting Real FastAPI backtesting service on port 8000..."
            cd /app/services
            python backtesting_service.py

        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        - name: DB_PORT
          value: "5432"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Resource limits
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        volumeMounts:
        - name: app-volume
          mountPath: /app
        - name: host-source
          mountPath: /host-source
          readOnly: true

      volumes:
      - name: app-volume
        emptyDir: {}
      - name: host-source
        hostPath:
          path: /Users/yetang/Development/time-series-indexing/backend
          type: Directory

      restartPolicy: Always

---
# Service to expose the backtesting service
apiVersion: v1
kind: Service
metadata:
  name: backtesting-service
  namespace: time-series-indexing
  labels:
    app: backtesting-service
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: backtesting-service