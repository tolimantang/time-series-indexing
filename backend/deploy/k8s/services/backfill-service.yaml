---
# Ephemeral Backfill Service - Deploy on-demand, delete when done
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backfill-service
  namespace: time-series-indexing
  labels:
    app: backfill-service
    version: v1
    pattern: ephemeral
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backfill-service
  template:
    metadata:
      labels:
        app: backfill-service
        version: v1
    spec:
      containers:
      - name: backfill-service
        image: python:3.11-slim
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "🚀 Starting Unified Backfill Service..."

            # Install system dependencies
            apt-get update && apt-get install -y \
              libpq-dev \
              gcc \
              curl \
              build-essential \
              && rm -rf /var/lib/apt/lists/*

            # Install Python dependencies
            pip install --no-cache-dir \
              fastapi==0.104.1 \
              uvicorn[standard]==0.24.0 \
              pydantic==2.5.0 \
              psycopg2-binary==2.9.9 \
              python-json-logger==2.0.7 \
              pandas \
              numpy \
              yfinance \
              pyephem \
              requests

            # Try to install swisseph (may fail but we'll handle gracefully)
            pip install --no-cache-dir swisseph || echo "⚠️ Swiss Ephemeris not available, using fallback"

            # Create directory structure
            mkdir -p /app/services
            mkdir -p /app/market_encoder/core
            mkdir -p /app/astro_encoder/core
            mkdir -p /app/astro_encoder/models
            mkdir -p /app/astro_encoder/utils

            # Copy source files from ConfigMap
            cp /source/backfill_service.py /app/services/

            # Copy market encoder files
            cp /source/market_encoder_core_encoder.py /app/market_encoder/core/encoder.py || echo "⚠️ Market encoder not found"

            # Copy astro encoder files
            cp /source/astro_encoder_core_encoder.py /app/astro_encoder/core/encoder.py || echo "⚠️ Astro encoder not found"

            # Create minimal __init__.py files
            echo "" > /app/services/__init__.py
            echo "" > /app/market_encoder/__init__.py
            echo "" > /app/market_encoder/core/__init__.py
            echo "" > /app/astro_encoder/__init__.py
            echo "" > /app/astro_encoder/core/__init__.py
            echo "" > /app/astro_encoder/models/__init__.py
            echo "" > /app/astro_encoder/utils/__init__.py

            # Create minimal fallback modules if encoders are missing
            if [ ! -f /app/market_encoder/core/encoder.py ]; then
              cat > /app/market_encoder/core/encoder.py << 'EOF'
            class MarketEncoder:
                def __init__(self, **kwargs):
                    pass
                def fetch_sp500_data(self, days_back=365):
                    import pandas as pd
                    return pd.DataFrame()
            EOF
            fi

            if [ ! -f /app/astro_encoder/core/encoder.py ]; then
              cat > /app/astro_encoder/core/encoder.py << 'EOF'
            class AstroEncoder:
                def __init__(self):
                    pass
                def encode_date_range(self, start_date, end_date, location='universal'):
                    return []
            EOF
            fi

            # Verify main service file exists
            if [ ! -f /app/services/backfill_service.py ]; then
              echo "❌ backfill_service.py not found"
              exit 1
            fi

            echo "✅ Source files copied successfully"
            echo "🌙 Starting Unified Backfill Service on port 8001..."

            # Start the service
            cd /app/services
            python backfill_service.py

        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        - name: DB_PORT
          value: "5432"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Resource limits (ephemeral service can use more resources temporarily)
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

        volumeMounts:
        - name: source-code
          mountPath: /source
          readOnly: true

      volumes:
      - name: source-code
        configMap:
          name: backfill-source-code

      restartPolicy: Always

---
# Service to expose the backfill service
apiVersion: v1
kind: Service
metadata:
  name: backfill-service
  namespace: time-series-indexing
  labels:
    app: backfill-service
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: backfill-service

---
# Optional: Job to auto-cleanup after specified time (uncomment to use)
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: backfill-service-cleanup
#   namespace: time-series-indexing
# spec:
#   activeDeadlineSeconds: 3600  # Auto-cleanup after 1 hour
#   template:
#     spec:
#       restartPolicy: Never
#       containers:
#       - name: cleanup
#         image: alpine:latest
#         command: ["/bin/sh"]
#         args:
#           - -c
#           - |
#             echo "⏰ Auto-cleanup job - service will be deleted after timeout"
#             sleep 3600
#             echo "🗑️ Cleanup time reached - this would delete the service"