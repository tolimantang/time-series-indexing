---
# ConfigMap for backtesting service
apiVersion: v1
kind: ConfigMap
metadata:
  name: backtesting-service-config
  namespace: time-series-indexing
data:
  LOG_LEVEL: "INFO"
  SERVICE_NAME: "backtesting-service"
  VERSION: "1.0.0"

---
# Deployment for backtesting service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backtesting-service
  namespace: time-series-indexing
  labels:
    app: backtesting-service
    version: v1
spec:
  replicas: 1  # Start with 1, can scale later
  selector:
    matchLabels:
      app: backtesting-service
  template:
    metadata:
      labels:
        app: backtesting-service
        version: v1
    spec:
      initContainers:
      # Git sync to get latest code
      - name: git-sync
        image: alpine/git:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "üìÇ Syncing latest code for backtesting service..."
            git clone https://github.com/your-repo/time-series-indexing.git /workspace || \
            echo "‚ö†Ô∏è  Using placeholder - update with actual repo URL"

            # Copy service code
            if [ -d /workspace/backend/src ]; then
              cp -r /workspace/backend/src/* /app/
              echo "‚úÖ Service code synced successfully"
            else
              echo "‚ùå Source code not found in repository"
              exit 1
            fi
        volumeMounts:
        - name: app-volume
          mountPath: /app
        - name: workspace-volume
          mountPath: /workspace

      containers:
      - name: backtesting-service
        image: python:3.11-slim
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "üöÄ Starting Backtesting Service..."

            # Install system dependencies
            apt-get update && apt-get install -y \
              libpq-dev \
              gcc \
              && rm -rf /var/lib/apt/lists/*

            # Install Python dependencies
            pip install --no-cache-dir -r /app/services/requirements.txt

            # Verify service file exists
            if [ ! -f /app/services/backtesting_service.py ]; then
              echo "‚ùå backtesting_service.py not found"
              exit 1
            fi

            # Start the service
            echo "üåô Starting FastAPI backtesting service on port 8000..."
            cd /app/services
            uvicorn backtesting_service:app --host 0.0.0.0 --port 8000 --log-level info

        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        - name: DB_PORT
          value: "5432"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backtesting-service-config
              key: LOG_LEVEL

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

        volumeMounts:
        - name: app-volume
          mountPath: /app

      volumes:
      - name: app-volume
        emptyDir: {}
      - name: workspace-volume
        emptyDir: {}

      # Restart policy
      restartPolicy: Always

---
# Service to expose the backtesting service
apiVersion: v1
kind: Service
metadata:
  name: backtesting-service
  namespace: time-series-indexing
  labels:
    app: backtesting-service
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: backtesting-service

---
# Optional: Ingress for external access (if needed)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: backtesting-service-ingress
#   namespace: time-series-indexing
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - host: backtesting.your-domain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: backtesting-service
#             port:
#               number: 8000