apiVersion: batch/v1
kind: Job
metadata:
  name: check-astro-data
  namespace: time-series-indexing
spec:
  template:
    spec:
      containers:
      - name: data-checker
        image: ubuntu:latest
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "🔍 Checking available astro data"

            # Install dependencies
            apt-get update && apt-get install -y python3 python3-pip libpq-dev
            pip3 install --break-system-packages psycopg2-binary

            # Create data checker script
            cat > check_astro.py << 'EOF'
            import psycopg2
            import os

            # Connect to database
            conn = psycopg2.connect(
                host=os.environ.get('DB_HOST'),
                database=os.environ.get('DB_NAME'),
                user=os.environ.get('DB_USER'),
                password=os.environ.get('DB_PASSWORD'),
                port=os.environ.get('DB_PORT', '5432')
            )

            with conn.cursor() as cur:
                # Check what tables exist
                cur.execute("""
                    SELECT table_name
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name LIKE '%astro%' OR table_name LIKE '%daily%' OR table_name LIKE '%condition%'
                    ORDER BY table_name;
                """)

                tables = cur.fetchall()
                print("🌟 Available astro/daily tables:")
                for table in tables:
                    print(f"  - {table[0]}")

                # Check daily_conditions structure if it exists
                try:
                    cur.execute("SELECT * FROM daily_conditions LIMIT 3;")
                    results = cur.fetchall()

                    cur.execute("""
                        SELECT column_name, data_type
                        FROM information_schema.columns
                        WHERE table_name = 'daily_conditions'
                        ORDER BY ordinal_position;
                    """)
                    columns = cur.fetchall()

                    print("\n📊 daily_conditions table structure:")
                    for col_name, col_type in columns:
                        print(f"  - {col_name}: {col_type}")

                    print(f"\nSample data (first 3 rows):")
                    for i, row in enumerate(results, 1):
                        print(f"  Row {i}: {row}")

                except Exception as e:
                    print(f"❌ daily_conditions table not found or error: {e}")

                # Check for any moon/lunar data
                try:
                    cur.execute("""
                        SELECT table_name
                        FROM information_schema.tables
                        WHERE table_schema = 'public'
                        AND (table_name LIKE '%moon%' OR table_name LIKE '%lunar%')
                        ORDER BY table_name;
                    """)

                    moon_tables = cur.fetchall()
                    if moon_tables:
                        print("\n🌙 Moon/Lunar tables:")
                        for table in moon_tables:
                            print(f"  - {table[0]}")
                    else:
                        print("\n🌙 No dedicated moon/lunar tables found")

                except Exception as e:
                    print(f"❌ Error checking moon tables: {e}")

            conn.close()
            EOF

            # Run the checker
            python3 check_astro.py
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        - name: DB_PORT
          value: "5432"
      restartPolicy: Never
  backoffLimit: 1