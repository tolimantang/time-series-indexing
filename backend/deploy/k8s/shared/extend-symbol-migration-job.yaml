apiVersion: batch/v1
kind: Job
metadata:
  name: extend-symbol-migration
  namespace: time-series-indexing
  labels:
    app: database-migration
    migration: "003"
spec:
  template:
    metadata:
      labels:
        app: database-migration
        migration: "003"
    spec:
      containers:
      - name: migration
        image: postgres:15
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üöÄ Starting Database Migration 003: Extend Symbol Length"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          # Create the migration SQL
          cat > /tmp/003_extend_symbol_length.sql << 'EOF'
          -- Migration 003: Extend symbol column length for commodities and longer symbols
          -- This increases symbol VARCHAR length from 10 to 25 characters to support:
          -- - Oil futures: CRUDE_OIL_WTI, CRUDE_OIL_BRENT
          -- - Other commodities: GOLD, SILVER, etc.
          -- - Future longer symbol names

          BEGIN;

          -- Check current column length
          SELECT column_name, character_maximum_length
          FROM information_schema.columns
          WHERE table_name = 'market_data' AND column_name = 'symbol';

          -- Extend symbol column in market_data table
          ALTER TABLE market_data ALTER COLUMN symbol TYPE VARCHAR(25);

          -- Update the function parameter to match new length
          CREATE OR REPLACE FUNCTION calculate_daily_return(
              p_symbol VARCHAR(25),  -- Updated from VARCHAR(10)
              p_date DATE
          ) RETURNS DECIMAL(8,6) AS $$
          DECLARE
              current_price DECIMAL(12,4);
              previous_price DECIMAL(12,4);
              daily_return DECIMAL(8,6);
          BEGIN
              -- Get current day's close price
              SELECT close_price INTO current_price
              FROM market_data
              WHERE symbol = p_symbol AND trade_date = p_date;

              -- Get previous trading day's close price
              SELECT close_price INTO previous_price
              FROM market_data
              WHERE symbol = p_symbol
                AND trade_date < p_date
              ORDER BY trade_date DESC
              LIMIT 1;

              -- Calculate return
              IF previous_price IS NOT NULL AND previous_price > 0 THEN
                  daily_return := (current_price - previous_price) / previous_price;
              ELSE
                  daily_return := NULL;
              END IF;

              RETURN daily_return;
          END;
          $$ LANGUAGE plpgsql;

          -- Add comment for documentation
          COMMENT ON COLUMN market_data.symbol IS 'Symbol identifier, supports up to 25 characters for commodities and longer symbols';

          -- Verify the change
          SELECT column_name, character_maximum_length
          FROM information_schema.columns
          WHERE table_name = 'market_data' AND column_name = 'symbol';

          COMMIT;
          EOF

          # Test database connection
          echo "üîó Testing database connection..."
          psql -c "SELECT version();"

          if [ $? -ne 0 ]; then
            echo "‚ùå Database connection failed"
            exit 1
          fi

          echo "‚úÖ Database connection successful"

          # Check if migration is needed
          echo "üîç Checking current symbol column length..."
          CURRENT_LENGTH=$(psql -tAc "SELECT character_maximum_length FROM information_schema.columns WHERE table_name = 'market_data' AND column_name = 'symbol';")

          echo "Current symbol column length: $CURRENT_LENGTH"

          if [ "$CURRENT_LENGTH" = "25" ]; then
            echo "‚úÖ Migration already applied - symbol column is already VARCHAR(25)"
            echo "üéâ Migration 003 completed (already applied)"
            exit 0
          fi

          if [ "$CURRENT_LENGTH" != "10" ]; then
            echo "‚ö†Ô∏è  Unexpected current length: $CURRENT_LENGTH (expected 10)"
            echo "Proceeding with migration anyway..."
          fi

          # Run the migration
          echo "üìä Running migration 003: Extend symbol length from $CURRENT_LENGTH to 25..."
          psql -f /tmp/003_extend_symbol_length.sql

          if [ $? -eq 0 ]; then
            echo "‚úÖ Migration 003 completed successfully"

            # Verify the migration
            NEW_LENGTH=$(psql -tAc "SELECT character_maximum_length FROM information_schema.columns WHERE table_name = 'market_data' AND column_name = 'symbol';")
            echo "‚úÖ Verified: symbol column length is now $NEW_LENGTH"

            echo "üéâ Migration 003: Extend Symbol Length - COMPLETED"
          else
            echo "‚ùå Migration 003 failed"
            exit 1
          fi

        env:
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password

        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

      # Tolerate CriticalAddonsOnly taint
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "CriticalAddonsOnly"
        operator: "Exists"
        effect: "NoExecute"

      restartPolicy: Never

  backoffLimit: 1