apiVersion: batch/v1
kind: Job
metadata:
  name: market-encoder-postgres-test
  namespace: time-series-indexing
  labels:
    app: market-encoder-test
spec:
  template:
    metadata:
      labels:
        app: market-encoder-test
    spec:
      containers:
      - name: market-encoder-test
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          # Install dependencies
          pip install psycopg2-binary requests pandas pyyaml

          # Test script
          python3 -c "
          import psycopg2
          import requests
          import pandas as pd
          from datetime import datetime
          import os

          # Database connection
          try:
              conn = psycopg2.connect(
                  host=os.environ['DB_HOST'],
                  port=os.environ['DB_PORT'],
                  database=os.environ['DB_NAME'],
                  user=os.environ['DB_USER'],
                  password=os.environ['DB_PASSWORD']
              )
              print('‚úÖ Database connection successful')

              # Create test table
              cur = conn.cursor()
              cur.execute('''
                  CREATE TABLE IF NOT EXISTS market_data_test (
                      id SERIAL PRIMARY KEY,
                      symbol VARCHAR(10),
                      trade_date DATE,
                      close_price DECIMAL(12,4),
                      created_at TIMESTAMP DEFAULT NOW()
                  )
              ''')
              conn.commit()
              print('‚úÖ Test table created')

              # Fetch test data from Yahoo Finance
              symbol = 'AAPL'
              url = f'https://query1.finance.yahoo.com/v8/finance/chart/{symbol}'
              headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}

              response = requests.get(url, headers=headers)
              data = response.json()

              if 'chart' in data and data['chart']['result']:
                  result = data['chart']['result'][0]
                  timestamps = result['timestamp']
                  quotes = result['indicators']['quote'][0]

                  # Get latest price
                  latest_close = quotes['close'][-1]
                  latest_timestamp = timestamps[-1]
                  latest_date = datetime.fromtimestamp(latest_timestamp).date()

                  print(f'‚úÖ Fetched {symbol} data: ${latest_close} on {latest_date}')

                  # Insert into database
                  cur.execute('''
                      INSERT INTO market_data_test (symbol, trade_date, close_price)
                      VALUES (%s, %s, %s)
                      ON CONFLICT DO NOTHING
                  ''', (symbol, latest_date, latest_close))
                  conn.commit()

                  print(f'‚úÖ Data inserted into PostgreSQL')

                  # Verify insertion
                  cur.execute('SELECT COUNT(*) FROM market_data_test WHERE symbol = %s', (symbol,))
                  count = cur.fetchone()[0]
                  print(f'‚úÖ Database contains {count} records for {symbol}')

              else:
                  print('‚ùå Failed to fetch market data')

              cur.close()
              conn.close()

          except Exception as e:
              print(f'‚ùå Error: {e}')
              exit(1)

          print('üéâ PostgreSQL test completed successfully!')
          "
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-host
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: market-encoder-secrets
              key: db-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      restartPolicy: Never
  backoffLimit: 3