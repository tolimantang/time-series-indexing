name: Deploy Indexing Services

on:
  push:
    branches: [main]
    paths:
      - 'backend/src/services/backfill_service.py'
      - 'backend/src/services/backtesting_service.py'
      - 'backend/src/llm_analyzer/**'
      - 'backend/requirements.txt'
      - 'backend/deploy/k8s/services-docker/backfill-service.yaml'
      - 'backend/deploy/k8s/services-docker/backtesting-service.yaml'
      - '.github/workflows/deploy-indexing-services.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: astrofinancial-backfill-service
  K8S_NAMESPACE: time-series-indexing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name financial-cluster

    - name: Create/Update Kubernetes secrets
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        CHROMA_API_KEY: ${{ secrets.CHROMA_API_KEY }}
        CHROMA_TENANT: ${{ secrets.CHROMA_TENANT }}
        CHROMA_DATABASE: ${{ secrets.CHROMA_DATABASE }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

        # Create/update database secrets
        kubectl create secret generic market-encoder-secrets \
          --from-literal=db-host="$DB_HOST" \
          --from-literal=db-name="$DB_NAME" \
          --from-literal=db-user="$DB_USER" \
          --from-literal=db-password="$DB_PASSWORD" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create/update FRED API secret
        kubectl create secret generic fred-api-secret \
          --from-literal=api-key="$FRED_API_KEY" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create/update ChromaDB secret
        kubectl create secret generic chromadb-secret \
          --from-literal=api-key="$CHROMA_API_KEY" \
          --from-literal=tenant="$CHROMA_TENANT" \
          --from-literal=database="$CHROMA_DATABASE" \
          --from-literal=use-hosted="cloud" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy indexing services
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Deploy backfill and backtesting services
        services=(backfill backtesting)

        for service in "${services[@]}"; do
          echo "🚀 Deploying $service-service..."

          # Update image in deployment
          cd backend
          sed -i "s|image: .*astrofinancial-backfill-service:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|" \
            deploy/k8s/services-docker/$service-service.yaml

          # Apply deployment
          kubectl apply -f deploy/k8s/services-docker/$service-service.yaml

          # Wait for rollout to complete
          kubectl rollout status deployment/$service-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s

          echo "✅ $service-service deployed successfully"
          cd ..
        done

    - name: Verify deployments
      run: |
        # Check deployments
        kubectl get deployments -l app=backfill-service -n ${{ env.K8S_NAMESPACE }}
        kubectl get deployments -l app=backtesting-service -n ${{ env.K8S_NAMESPACE }}

        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=backfill-service -n ${{ env.K8S_NAMESPACE }} --timeout=120s
        kubectl wait --for=condition=ready pod -l app=backtesting-service -n ${{ env.K8S_NAMESPACE }} --timeout=120s

    - name: Test indexing services
      run: |
        # Test backfill service
        echo "🔍 Testing backfill service..."
        kubectl port-forward svc/backfill-service 8001:8001 -n ${{ env.K8S_NAMESPACE }} &
        BACKFILL_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8001/health || echo "⚠️ Backfill service health check failed"

        # Test backtesting service
        echo "🔍 Testing backtesting service..."
        kubectl port-forward svc/backtesting-service 8000:8000 -n ${{ env.K8S_NAMESPACE }} &
        BACKTEST_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8000/health || echo "⚠️ Backtesting service health check failed"

        # Clean up port forwards
        kill $BACKFILL_PID $BACKTEST_PID 2>/dev/null || true

        echo "✅ Indexing services tests completed"

  notify-success:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    steps:
    - name: Notify deployment success
      run: |
        echo "🚀 Indexing Services deployed successfully!"
        echo "📊 Available services:"
        echo "  - Backfill Service: Port 8001 (/health, /backfill/*)"
        echo "  - Backtesting Service: Port 8000 (/health, /backtest/*)"