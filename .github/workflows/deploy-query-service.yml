name: Deploy Query Services

on:
  push:
    branches: [main]
    paths:
      # Code changes (require rebuild)
      - 'backend/src/query/**'
      - 'backend/src/mcp_tools/**'
      - 'backend/src/services/recommendation_service.py'
      - 'backend/src/services/*_manager.py'
      - 'backend/requirements.txt'
      - 'backend/Dockerfile'
      - 'backend/docker/Dockerfile.base'
      # Config changes (deploy only)
      - 'backend/deploy/k8s/services-docker/query-service.yaml'
      - 'backend/deploy/k8s/services-docker/recommendation-service.yaml'
      - '.github/workflows/deploy-query-service.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  K8S_NAMESPACE: time-series-indexing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repositories for query services
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # ECR repositories for query services
        repos=(astrofinancial-base astrofinancial-query-service astrofinancial-recommendation-service)

        for repo_name in "${repos[@]}"; do
          if ! aws ecr describe-repositories --repository-names $repo_name --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating ECR repository: $repo_name"
            aws ecr create-repository \
              --repository-name $repo_name \
              --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true
          else
            echo "ECR repository $repo_name already exists"
          fi
        done

    - name: Build and push base image and query services
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build base image first with cache and push to ECR
        echo "üî® Building base image with cache..."
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache \
          --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache,mode=max \
          -f backend/docker/Dockerfile.base \
          -t $ECR_REGISTRY/astrofinancial-base:latest \
          --push \
          backend/

        # Build and push query services using ECR base image
        services=(query recommendation)

        for service in "${services[@]}"; do
          echo "üî® Building $service-service with cache..."

          # Set service-specific variables
          case $service in
            recommendation)
              SERVICE_PORT=8002
              ;;
            query)
              SERVICE_PORT=8003
              ;;
          esac

          # Create a temporary Dockerfile that uses ECR base image
          echo "FROM $ECR_REGISTRY/astrofinancial-base:latest" > "Dockerfile.$service.tmp"
          echo "" >> "Dockerfile.$service.tmp"
          echo "# Set service-specific environment variables" >> "Dockerfile.$service.tmp"
          echo "ENV PORT=$SERVICE_PORT" >> "Dockerfile.$service.tmp"
          echo "ENV SERVICE_NAME=$service-service" >> "Dockerfile.$service.tmp"
          echo "" >> "Dockerfile.$service.tmp"
          echo "# Expose port" >> "Dockerfile.$service.tmp"
          echo "EXPOSE $SERVICE_PORT" >> "Dockerfile.$service.tmp"
          echo "" >> "Dockerfile.$service.tmp"
          echo "# Add service-specific Python path" >> "Dockerfile.$service.tmp"
          echo "ENV PYTHONPATH=/app/src" >> "Dockerfile.$service.tmp"
          echo "" >> "Dockerfile.$service.tmp"
          # Run the service
          echo "# Run the service" >> "Dockerfile.$service.tmp"
          if [ "$service" = "query" ]; then
            echo "CMD [\"python\", \"-m\", \"uvicorn\", \"query.financial_server.api_server:app\", \"--host\", \"0.0.0.0\", \"--port\", \"$SERVICE_PORT\", \"--log-level\", \"info\"]" >> "Dockerfile.$service.tmp"
          else
            echo "CMD [\"python\", \"-m\", \"uvicorn\", \"services.${service}_service:app\", \"--host\", \"0.0.0.0\", \"--port\", \"$SERVICE_PORT\", \"--log-level\", \"info\"]" >> "Dockerfile.$service.tmp"
          fi

          # Build and push service image with cache
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache \
            --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache,mode=max \
            -f "Dockerfile.$service.tmp" \
            -t $ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
            -t $ECR_REGISTRY/astrofinancial-$service-service:latest \
            --push \
            backend/

          # Clean up temporary Dockerfile
          rm "Dockerfile.$service.tmp"

          echo "‚úÖ $service-service pushed to ECR"
        done

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name financial-cluster

    - name: Create/Update Kubernetes secrets
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        CHROMA_API_KEY: ${{ secrets.CHROMA_API_KEY }}
        CHROMA_TENANT: ${{ secrets.CHROMA_TENANT }}
        CHROMA_DATABASE: ${{ secrets.CHROMA_DATABASE }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

        # Create/update all shared secrets needed by query services
        kubectl create secret generic market-encoder-secrets \
          --from-literal=db-host="$DB_HOST" \
          --from-literal=db-name="$DB_NAME" \
          --from-literal=db-user="$DB_USER" \
          --from-literal=db-password="$DB_PASSWORD" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl create secret generic fred-api-secret \
          --from-literal=api-key="$FRED_API_KEY" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl create secret generic chromadb-secret \
          --from-literal=api-key="$CHROMA_API_KEY" \
          --from-literal=tenant="$CHROMA_TENANT" \
          --from-literal=database="$CHROMA_DATABASE" \
          --from-literal=use-hosted="cloud" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        # Create/update Anthropic secret for LLM-powered Fed rate tool
        kubectl create secret generic anthropic-secret \
          --from-literal=api-key="$ANTHROPIC_API_KEY" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy query services
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Deploy query and recommendation services
        services=(query recommendation)

        for service in "${services[@]}"; do
          echo "üöÄ Deploying $service-service..."

          # Apply the Docker-based K8s deployments
          kubectl apply -f backend/deploy/k8s/services-docker/$service-service.yaml

          # Update deployment image to use the specific commit SHA
          kubectl set image deployment/$service-service \
            $service-service=$ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
            -n ${{ env.K8S_NAMESPACE }}

          # Wait for rollout to complete
          kubectl rollout status deployment/$service-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s

          echo "‚úÖ $service-service deployed successfully"
        done

    - name: Verify deployments
      run: |
        # Check deployments
        kubectl get deployments -l app=query-service -n ${{ env.K8S_NAMESPACE }}
        kubectl get deployments -l app=recommendation-service -n ${{ env.K8S_NAMESPACE }}

        # Wait for pods to be ready (increased timeout for service initialization)
        kubectl wait --for=condition=ready pod -l app=query-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl wait --for=condition=ready pod -l app=recommendation-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Test query services
      run: |
        # Test query service
        echo "üîç Testing query service..."
        kubectl port-forward svc/query-service 8003:8003 -n ${{ env.K8S_NAMESPACE }} &
        QUERY_PID=$!
        sleep 15

        # Test health endpoint
        curl -f http://localhost:8003/health || echo "‚ö†Ô∏è Query service health check failed"

        # Test MCP tools endpoint
        curl -f http://localhost:8003/tools || echo "‚ö†Ô∏è MCP tools endpoint failed"

        # Test Fed rate tool with natural language query
        echo "Testing Fed rate tool..."
        curl -f -X POST http://localhost:8003/tools/fed_rate_changes \
          -H "Content-Type: application/json" \
          -d '{"query": "Fed increases rates after 2020"}' || echo "‚ö†Ô∏è Fed rate tool test failed"

        # Test recommendation service
        echo "üîç Testing recommendation service..."
        kubectl port-forward svc/recommendation-service 8002:8002 -n ${{ env.K8S_NAMESPACE }} &
        REC_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8002/health || echo "‚ö†Ô∏è Recommendation service health check failed"

        # Clean up port forwards
        kill $QUERY_PID $REC_PID 2>/dev/null || true

        echo "‚úÖ Query services tests completed"

  notify-success:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    steps:
    - name: Notify deployment success
      run: |
        echo "üöÄ Query Services deployed successfully!"
        echo "üìä Available services:"
        echo "  - Query Service: Port 8003 (/health, /tools, /query/*)"
        echo "    - Fed Rate Tool: POST /tools/fed_rate_changes"
        echo "    - Natural Language Queries: POST /query/simple"
        echo "  - Recommendation Service: Port 8002 (/health, /recommendations/*)"
        echo "  - Images: astrofinancial-query-service:${{ github.sha }}, astrofinancial-recommendation-service:${{ github.sha }}"