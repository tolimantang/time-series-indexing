name: Deploy Query Services

on:
  push:
    branches: [main]
    paths:
      - 'backend/src/query/**'
      - 'backend/src/mcp_tools/**'
      - 'backend/src/services/recommendation_service.py'
      - 'backend/requirements.txt'
      - 'backend/deploy/k8s/services-docker/query-service.yaml'
      - 'backend/deploy/k8s/services-docker/recommendation-service.yaml'
      - '.github/workflows/deploy-query-service.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: astrofinancial-backfill-service
  K8S_NAMESPACE: time-series-indexing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name financial-cluster

    - name: Create/Update Kubernetes secrets
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

        # Create/update Anthropic secret
        kubectl create secret generic anthropic-secret \
          --from-literal=api-key="${ANTHROPIC_API_KEY}" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

        # Apply other required secrets (assuming they exist)
        kubectl apply -f backend/deploy/k8s/market-encoder/market-encoder-secrets.yaml || echo "market-encoder-secrets.yaml not found, skipping"
        kubectl apply -f backend/deploy/k8s/secrets/chromadb-secret.yaml || echo "chromadb-secret.yaml not found, skipping"

    - name: Deploy query services
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Deploy query and recommendation services
        services=(query recommendation)

        for service in "${services[@]}"; do
          echo "🚀 Deploying $service-service..."

          # Update image in deployment
          cd backend
          sed -i "s|image: .*astrofinancial-backfill-service:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|" \
            deploy/k8s/services-docker/$service-service.yaml

          # Apply deployment
          kubectl apply -f deploy/k8s/services-docker/$service-service.yaml

          # Wait for rollout to complete
          kubectl rollout status deployment/$service-service -n ${{ env.K8S_NAMESPACE }} --timeout=300s

          echo "✅ $service-service deployed successfully"
          cd ..
        done

    - name: Verify deployments
      run: |
        # Check deployments
        kubectl get deployments -l app=query-service -n ${{ env.K8S_NAMESPACE }}
        kubectl get deployments -l app=recommendation-service -n ${{ env.K8S_NAMESPACE }}

        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=query-service -n ${{ env.K8S_NAMESPACE }} --timeout=120s
        kubectl wait --for=condition=ready pod -l app=recommendation-service -n ${{ env.K8S_NAMESPACE }} --timeout=120s

    - name: Test query services
      run: |
        # Test query service
        echo "🔍 Testing query service..."
        kubectl port-forward svc/query-service 8003:8003 -n ${{ env.K8S_NAMESPACE }} &
        QUERY_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8003/health || echo "⚠️ Query service health check failed"

        # Test MCP tools endpoint
        curl -f http://localhost:8003/tools || echo "⚠️ MCP tools endpoint failed"

        # Test Fed rate tool with natural language query
        echo "Testing Fed rate tool..."
        curl -f -X POST http://localhost:8003/tools/fed_rate_changes \
          -H "Content-Type: application/json" \
          -d '{"query": "Fed increases rates after 2020"}' || echo "⚠️ Fed rate tool test failed"

        # Test recommendation service
        echo "🔍 Testing recommendation service..."
        kubectl port-forward svc/recommendation-service 8002:8002 -n ${{ env.K8S_NAMESPACE }} &
        REC_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8002/health || echo "⚠️ Recommendation service health check failed"

        # Clean up port forwards
        kill $QUERY_PID $REC_PID 2>/dev/null || true

        echo "✅ Query services tests completed"

  notify-success:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    steps:
    - name: Notify deployment success
      run: |
        echo "🚀 Query Services deployed successfully!"
        echo "📊 Available services:"
        echo "  - Query Service: Port 8003 (/health, /tools, /query/*)"
        echo "    - Fed Rate Tool: POST /tools/fed_rate_changes"
        echo "    - Natural Language Queries: POST /query/simple"
        echo "  - Recommendation Service: Port 8002 (/health, /recommendations/*)"