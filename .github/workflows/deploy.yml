name: Deploy to EKS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "deploy/**"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  EKS_CLUSTER_NAME: financial-cluster
  ECR_REPOSITORY: market-encoder
  KUBERNETES_NAMESPACE: time-series-indexing

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push market encoder image to Amazon ECR
        id: build-market-encoder-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build market encoder image with buildx and cache
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache,mode=max \
            -f backend/deploy/docker/market-encoder.Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            backend/

          echo "market-encoder-image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Create ECR repositories for backend services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Include base image repository
          repos=(astrofinancial-base astrofinancial-backfill-service astrofinancial-backtesting-service astrofinancial-recommendation-service)

          for repo_name in "${repos[@]}"; do
            # Check if repository exists, create if it doesn't
            if ! aws ecr describe-repositories --repository-names $repo_name --region ${{ env.AWS_REGION }} 2>/dev/null; then
              echo "Creating ECR repository: $repo_name"
              aws ecr create-repository \
                --repository-name $repo_name \
                --region ${{ env.AWS_REGION }} \
                --image-scanning-configuration scanOnPush=true
            else
              echo "ECR repository $repo_name already exists"
            fi
          done

      - name: Build and push backend services to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build base image first with cache and push to ECR
          echo "🔨 Building base image with cache..."
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache \
            --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache,mode=max \
            -f backend/docker/Dockerfile.base \
            -t $ECR_REGISTRY/astrofinancial-base:latest \
            --push \
            backend/

          # Build and push each backend service with cache, using ECR base image
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🔨 Building $service-service with cache..."

            # Set service-specific variables
            case $service in
              backfill)
                SERVICE_PORT=8001
                ;;
              backtesting)
                SERVICE_PORT=8000
                ;;
              recommendation)
                SERVICE_PORT=8002
                ;;
            esac

            # Create a temporary Dockerfile that uses ECR base image
            echo "FROM $ECR_REGISTRY/astrofinancial-base:latest" > "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Set service-specific environment variables" >> "Dockerfile.$service.tmp"
            echo "ENV PORT=$SERVICE_PORT" >> "Dockerfile.$service.tmp"
            echo "ENV SERVICE_NAME=$service-service" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Expose port" >> "Dockerfile.$service.tmp"
            echo "EXPOSE $SERVICE_PORT" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Add service-specific Python path" >> "Dockerfile.$service.tmp"
            echo "ENV PYTHONPATH=/app/src" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Run the service" >> "Dockerfile.$service.tmp"
            echo "CMD [\"python\", \"-m\", \"uvicorn\", \"services.${service}_service:app\", \"--host\", \"0.0.0.0\", \"--port\", \"$SERVICE_PORT\", \"--log-level\", \"info\"]" >> "Dockerfile.$service.tmp"

            # Build and push service image with cache
            docker buildx build \
              --platform linux/amd64 \
              --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache \
              --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache,mode=max \
              -f "Dockerfile.$service.tmp" \
              -t $ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
              -t $ECR_REGISTRY/astrofinancial-$service-service:latest \
              --push \
              backend/

            # Clean up temporary Dockerfile
            rm "Dockerfile.$service.tmp"

            echo "✅ $service-service pushed to ECR"
          done

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Check for SQL changes or pending migrations
        id: sql-changes
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          FORCE_MIGRATIONS: ${{ vars.FORCE_MIGRATIONS || 'false' }}
        run: |
          echo "🔍 Checking for SQL migration changes and pending migrations..."

          # Check if migrations should be forced
          if [ "$FORCE_MIGRATIONS" = "true" ]; then
            echo "sql-changed=true" >> $GITHUB_OUTPUT
            echo "🔧 FORCE_MIGRATIONS is enabled, will run migrations"
            exit 0
          fi

          # Check for SQL file changes in recent commits (last 5 commits)
          SQL_CHANGES_RECENT=$(git log --name-only --oneline -5 | grep "backend/sql/flyway/" | wc -l)
          if [ "$SQL_CHANGES_RECENT" -gt 0 ]; then
            echo "sql-changed=true" >> $GITHUB_OUTPUT
            echo "✅ SQL migration files found in recent commits, will run migrations"
            git log --name-only --oneline -5 | grep "backend/sql/flyway/" | head -5
            exit 0
          fi

          # Check for pending migrations by comparing local flyway files with database
          echo "📊 Checking for pending migrations in database..."

          # Install PostgreSQL client for checking database state
          sudo apt-get update -q && sudo apt-get install -y postgresql-client

          # Get list of migration files
          LOCAL_MIGRATIONS=$(find backend/sql/flyway -name "V*.sql" | sort | sed 's/.*V\([0-9]*\)__.*/\1/')
          echo "📁 Local migration versions found: $LOCAL_MIGRATIONS"

          # Check database migration status (if accessible)
          DB_MIGRATIONS=""
          if pg_isready -h "$DB_HOST" -p 5432 -U "$DB_USER" -q; then
            echo "📡 Database is accessible, checking applied migrations..."
            DB_MIGRATIONS=$(PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT version FROM flyway_schema_history WHERE success = true ORDER BY version;" 2>/dev/null | tr -d ' ' | grep -v '^$' || echo "")
            echo "💾 Database migration versions applied: $DB_MIGRATIONS"

            # Compare local vs database migrations
            for version in $LOCAL_MIGRATIONS; do
              if ! echo "$DB_MIGRATIONS" | grep -q "^$version$"; then
                echo "sql-changed=true" >> $GITHUB_OUTPUT
                echo "🆕 Found pending migration V$version, will run migrations"
                exit 0
              fi
            done

            echo "sql-changed=false" >> $GITHUB_OUTPUT
            echo "✅ All migrations are up to date"
          else
            echo "⚠️ Database not accessible, checking recent commits for safety"
            # Fallback: check last commit for SQL changes as safety measure
            if git diff --name-only HEAD~1 HEAD | grep -q "backend/sql/flyway/"; then
              echo "sql-changed=true" >> $GITHUB_OUTPUT
              echo "✅ SQL migration files changed in last commit, will run migrations"
            else
              echo "sql-changed=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No recent SQL migration changes detected"
            fi
          fi

      - name: Run Database Migrations via Kubernetes Job
        if: steps.sql-changes.outputs.sql-changed == 'true'
        run: |
          echo "🗄️ Running database migrations via Kubernetes job..."

          # Create a unique job name with timestamp
          MIGRATION_JOB_NAME="flyway-migration-$(date +%Y%m%d-%H%M%S)"

          # Create temporary migration job YAML with current repo URL
          cat > migration-job.yaml << EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${MIGRATION_JOB_NAME}
            namespace: time-series-indexing
          spec:
            template:
              spec:
                initContainers:
                - name: git-clone
                  image: alpine/git:latest
                  command: ["/bin/sh"]
                  args:
                    - -c
                    - |
                      echo "📂 Cloning repository for migration files..."
                      git clone https://github.com/tolimantang/time-series-indexing.git /workspace
                      echo "📋 Current commit: \$(cd /workspace && git rev-parse HEAD)"

                      # Copy migration files to shared volume
                      if [ -d /workspace/backend/sql/flyway ]; then
                        cp -r /workspace/backend/sql/flyway/* /migrations/
                        echo "✅ Migration files copied successfully"
                        echo "📁 Available migrations:"
                        ls -la /migrations/
                      else
                        echo "❌ Migration files not found"
                        exit 1
                      fi
                  volumeMounts:
                  - name: migrations-volume
                    mountPath: /migrations
                  - name: workspace-volume
                    mountPath: /workspace
                containers:
                - name: flyway
                  image: flyway/flyway:10.15.0
                  command: ["/bin/sh"]
                  args:
                    - -c
                    - |
                      echo "🛠️  Running Flyway migrations..."

                      # Set up Flyway configuration from environment
                      export FLYWAY_URL="jdbc:postgresql://\${DB_HOST}:\${DB_PORT}/\${DB_NAME}"
                      export FLYWAY_USER="\${DB_USER}"
                      export FLYWAY_PASSWORD="\${DB_PASSWORD}"
                      export FLYWAY_LOCATIONS="filesystem:/migrations"
                      export FLYWAY_BASELINE_ON_MIGRATE=true
                      export FLYWAY_BASELINE_VERSION=0
                      export FLYWAY_BASELINE_DESCRIPTION="Pre-Flyway baseline"
                      export FLYWAY_SCHEMAS=public
                      export FLYWAY_TABLE=flyway_schema_history
                      export FLYWAY_VALIDATE_ON_MIGRATE=true

                      echo "📊 Database: \${FLYWAY_URL}"
                      echo "📁 Migrations location: \${FLYWAY_LOCATIONS}"

                      # Show migration files
                      echo "📋 Available migrations:"
                      ls -la /migrations/

                      # Show current schema state
                      echo "🔍 Checking current schema state..."
                      flyway info || echo "⚠️  Schema history table doesn't exist yet"

                      # Run migrations
                      echo "🚀 Running migrations..."
                      flyway migrate

                      # Show final state
                      echo "✅ Migration completed! Final state:"
                      flyway info
                  env:
                  - name: DB_HOST
                    valueFrom:
                      secretKeyRef:
                        name: market-encoder-secrets
                        key: db-host
                  - name: DB_USER
                    valueFrom:
                      secretKeyRef:
                        name: market-encoder-secrets
                        key: db-user
                  - name: DB_NAME
                    valueFrom:
                      secretKeyRef:
                        name: market-encoder-secrets
                        key: db-name
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: market-encoder-secrets
                        key: db-password
                  - name: DB_PORT
                    value: "5432"
                  volumeMounts:
                  - name: migrations-volume
                    mountPath: /migrations
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "200m"
                volumes:
                - name: migrations-volume
                  emptyDir: {}
                - name: workspace-volume
                  emptyDir: {}
                restartPolicy: Never
            backoffLimit: 1
          EOF

          # Apply the migration job
          echo "🚀 Creating migration job: ${MIGRATION_JOB_NAME}"
          kubectl apply -f migration-job.yaml

          # Wait for job to complete
          echo "⏳ Waiting for migration job to complete..."
          kubectl wait --for=condition=complete job/${MIGRATION_JOB_NAME} -n time-series-indexing --timeout=300s || {
            echo "❌ Migration job failed or timed out"
            kubectl describe job/${MIGRATION_JOB_NAME} -n time-series-indexing
            kubectl logs job/${MIGRATION_JOB_NAME} -n time-series-indexing
            exit 1
          }

          # Show logs
          echo "📋 Migration job logs:"
          kubectl logs job/${MIGRATION_JOB_NAME} -n time-series-indexing

          # Clean up job
          echo "🧹 Cleaning up migration job..."
          kubectl delete job/${MIGRATION_JOB_NAME} -n time-series-indexing

          echo "✅ Database migrations completed successfully via Kubernetes job"

      - name: Skip Database Migrations
        if: steps.sql-changes.outputs.sql-changed == 'false'
        run: echo "⏭️ Skipping database migrations - no SQL changes detected"

      - name: Deploy to EKS
        env:
          MARKET_ENCODER_IMAGE: ${{ steps.build-market-encoder-image.outputs.market-encoder-image }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          # Database secrets
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # FRED API secrets
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
          # ChromaDB secrets
          CHROMA_API_KEY: ${{ secrets.CHROMA_API_KEY }}
          CHROMA_TENANT: ${{ secrets.CHROMA_TENANT }}
          CHROMA_DATABASE: ${{ secrets.CHROMA_DATABASE }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

          # Create market encoder secrets
          kubectl create secret generic market-encoder-secrets \
            --from-literal=db-host="$DB_HOST" \
            --from-literal=db-name="$DB_NAME" \
            --from-literal=db-user="$DB_USER" \
            --from-literal=db-password="$DB_PASSWORD" \
            --namespace=$KUBERNETES_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create FRED API secret
          kubectl create secret generic fred-api-secret \
            --from-literal=api-key="$FRED_API_KEY" \
            --namespace=$KUBERNETES_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create ChromaDB secret
          kubectl create secret generic chromadb-secret \
            --from-literal=api-key="$CHROMA_API_KEY" \
            --from-literal=tenant="$CHROMA_TENANT" \
            --from-literal=database="$CHROMA_DATABASE" \
            --from-literal=use-hosted="cloud" \
            --namespace=$KUBERNETES_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Deploy market encoder cronjob (image tag is already set to latest)
          kubectl apply -f backend/deploy/k8s/market-encoder/simple-market-encoder-cronjob.yaml

          # Deploy backend services with updated image tags
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🚀 Deploying $service-service..."

            # Apply the Docker-based K8s deployments
            kubectl apply -f backend/deploy/k8s/services-docker/$service-service.yaml

            # Update deployment image to use the specific commit SHA
            kubectl set image deployment/$service-service \
              $service-service=$ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
              -n $KUBERNETES_NAMESPACE

            # Wait for rollout to complete
            kubectl rollout status deployment/$service-service -n $KUBERNETES_NAMESPACE --timeout=300s

            echo "✅ $service-service deployed successfully"
          done

      - name: Verify deployment
        run: |
          # Verify market encoder
          kubectl get cronjobs -n $KUBERNETES_NAMESPACE
          kubectl get configmaps -n $KUBERNETES_NAMESPACE
          kubectl get secrets -n $KUBERNETES_NAMESPACE

          # Verify backend services
          kubectl get deployments -l deployment-type=docker -n $KUBERNETES_NAMESPACE
          kubectl get services -l deployment-type=docker -n $KUBERNETES_NAMESPACE
          kubectl get pods -l deployment-type=docker -n $KUBERNETES_NAMESPACE

      - name: Test market encoder manually
        run: |
          # Create a test job from the market encoder cronjob
          kubectl create job --from=cronjob/simple-market-encoder-daily test-$(date +%Y%m%d-%H%M%S) -n $KUBERNETES_NAMESPACE

          # Wait for the job to start
          sleep 15

          # Check job status
          kubectl get jobs -n $KUBERNETES_NAMESPACE

          # Get the test job name
          TEST_JOB=$(kubectl get jobs -n $KUBERNETES_NAMESPACE --sort-by=.metadata.creationTimestamp -o jsonpath="{.items[-1].metadata.name}")

          # Show logs (timeout after 3 minutes)
          timeout 180 kubectl logs -l job-name=$TEST_JOB -n $KUBERNETES_NAMESPACE -f || echo "Job timed out or completed"

          # Final job status
          kubectl get job $TEST_JOB -n $KUBERNETES_NAMESPACE -o yaml

      - name: Test backend services health
        run: |
          # Test health endpoints for backend services
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🔍 Testing $service-service health..."

            # Wait for pods to be ready
            kubectl wait --for=condition=Ready pods -l app=$service-service \
              -n $KUBERNETES_NAMESPACE --timeout=300s || echo "⚠️ $service-service not ready yet"

            # Get pod name for health check
            POD_NAME=$(kubectl get pods -l app=$service-service -n $KUBERNETES_NAMESPACE \
              -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

            if [ ! -z "$POD_NAME" ]; then
              echo "✅ $service-service pod $POD_NAME is ready"

              # Determine port
              case $service in
                backfill)
                  PORT=8001
                  ;;
                backtesting)
                  PORT=8000
                  ;;
                recommendation)
                  PORT=8002
                  ;;
              esac

              # Test health endpoint via port-forward
              timeout 30 kubectl port-forward pod/$POD_NAME -n $KUBERNETES_NAMESPACE $PORT:$PORT &
              PORT_FORWARD_PID=$!
              sleep 10

              # Check health endpoint
              if curl -f http://localhost:$PORT/health --max-time 10 --silent; then
                echo "✅ $service-service health check passed"
              else
                echo "⚠️ $service-service health check failed (may still be starting)"
              fi

              # Clean up port forward
              kill $PORT_FORWARD_PID 2>/dev/null || true
            else
              echo "❌ No pod found for $service-service"
            fi
          done

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment to EKS completed successfully"
          echo "✅ Market encoder and backend services deployed"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment to EKS failed"
          exit 1