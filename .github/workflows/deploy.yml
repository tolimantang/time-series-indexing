name: Deploy to EKS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "deploy/**"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  EKS_CLUSTER_NAME: financial-cluster
  ECR_REPOSITORY: market-encoder
  KUBERNETES_NAMESPACE: time-series-indexing

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push market encoder image to Amazon ECR
        id: build-market-encoder-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build market encoder image with buildx and cache
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache,mode=max \
            -f backend/deploy/docker/market-encoder.Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            backend/

          echo "market-encoder-image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Create ECR repositories for backend services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Include base image repository
          repos=(astrofinancial-base astrofinancial-backfill-service astrofinancial-backtesting-service astrofinancial-recommendation-service)

          for repo_name in "${repos[@]}"; do
            # Check if repository exists, create if it doesn't
            if ! aws ecr describe-repositories --repository-names $repo_name --region ${{ env.AWS_REGION }} 2>/dev/null; then
              echo "Creating ECR repository: $repo_name"
              aws ecr create-repository \
                --repository-name $repo_name \
                --region ${{ env.AWS_REGION }} \
                --image-scanning-configuration scanOnPush=true
            else
              echo "ECR repository $repo_name already exists"
            fi
          done

      - name: Build and push backend services to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build base image first with cache and push to ECR
          echo "🔨 Building base image with cache..."
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache \
            --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-base:buildcache,mode=max \
            -f backend/docker/Dockerfile.base \
            -t $ECR_REGISTRY/astrofinancial-base:latest \
            --push \
            backend/

          # Build and push each backend service with cache, using ECR base image
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🔨 Building $service-service with cache..."

            # Set service-specific variables
            case $service in
              backfill)
                SERVICE_PORT=8001
                ;;
              backtesting)
                SERVICE_PORT=8000
                ;;
              recommendation)
                SERVICE_PORT=8002
                ;;
            esac

            # Create a temporary Dockerfile that uses ECR base image
            echo "FROM $ECR_REGISTRY/astrofinancial-base:latest" > "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Set service-specific environment variables" >> "Dockerfile.$service.tmp"
            echo "ENV PORT=$SERVICE_PORT" >> "Dockerfile.$service.tmp"
            echo "ENV SERVICE_NAME=$service-service" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Expose port" >> "Dockerfile.$service.tmp"
            echo "EXPOSE $SERVICE_PORT" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Add service-specific Python path" >> "Dockerfile.$service.tmp"
            echo "ENV PYTHONPATH=/app/src" >> "Dockerfile.$service.tmp"
            echo "" >> "Dockerfile.$service.tmp"
            echo "# Run the service" >> "Dockerfile.$service.tmp"
            echo "CMD [\"python\", \"-m\", \"uvicorn\", \"services.${service}_service:app\", \"--host\", \"0.0.0.0\", \"--port\", \"$SERVICE_PORT\", \"--log-level\", \"info\"]" >> "Dockerfile.$service.tmp"

            # Build and push service image with cache
            docker buildx build \
              --platform linux/amd64 \
              --cache-from type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache \
              --cache-to type=registry,ref=$ECR_REGISTRY/astrofinancial-$service-service:buildcache,mode=max \
              -f "Dockerfile.$service.tmp" \
              -t $ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
              -t $ECR_REGISTRY/astrofinancial-$service-service:latest \
              --push \
              backend/

            # Clean up temporary Dockerfile
            rm "Dockerfile.$service.tmp"

            echo "✅ $service-service pushed to ECR"
          done

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Check for SQL changes
        id: sql-changes
        run: |
          echo "🔍 Checking for SQL migration changes..."
          if git diff --name-only HEAD~1 HEAD | grep -q "backend/sql/flyway/"; then
            echo "sql-changed=true" >> $GITHUB_OUTPUT
            echo "✅ SQL migration files changed, will run migrations"
          else
            echo "sql-changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No SQL migration changes detected"
          fi

      - name: Run Database Migrations
        if: steps.sql-changes.outputs.sql-changed == 'true'
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "🗄️ Running database migrations with Flyway..."

          # Install Flyway CLI
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.0.1/flyway-commandline-10.0.1-linux-x64.tar.gz | tar -xzf -
          sudo ln -s $(pwd)/flyway-10.0.1/flyway /usr/local/bin/

          # Configure Flyway
          cat > flyway.conf << EOF
          flyway.url=jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}
          flyway.user=${DB_USER}
          flyway.password=${DB_PASSWORD}
          flyway.locations=filesystem:backend/sql/flyway
          flyway.sqlMigrationPrefix=V
          flyway.sqlMigrationSeparator=__
          flyway.sqlMigrationSuffixes=.sql
          flyway.cleanDisabled=true
          flyway.validateOnMigrate=true
          EOF

          # Show current schema info
          echo "📊 Current migration status:"
          flyway -configFiles=flyway.conf info || echo "No migrations applied yet"

          # Run migrations
          echo "🚀 Applying pending migrations..."
          flyway -configFiles=flyway.conf migrate

          # Show final status
          echo "✅ Migration completed. Final status:"
          flyway -configFiles=flyway.conf info

      - name: Skip Database Migrations
        if: steps.sql-changes.outputs.sql-changed == 'false'
        run: echo "⏭️ Skipping database migrations - no SQL changes detected"

      - name: Deploy to EKS
        env:
          MARKET_ENCODER_IMAGE: ${{ steps.build-market-encoder-image.outputs.market-encoder-image }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          # Database secrets
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

          # Create market encoder secrets
          kubectl create secret generic market-encoder-secrets \
            --from-literal=db-host="$DB_HOST" \
            --from-literal=db-name="$DB_NAME" \
            --from-literal=db-user="$DB_USER" \
            --from-literal=db-password="$DB_PASSWORD" \
            --namespace=$KUBERNETES_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Deploy market encoder cronjob (image tag is already set to latest)
          kubectl apply -f backend/deploy/k8s/market-encoder/simple-market-encoder-cronjob.yaml

          # Deploy backend services with updated image tags
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🚀 Deploying $service-service..."

            # Apply the Docker-based K8s deployments
            kubectl apply -f backend/deploy/k8s/services-docker/$service-service.yaml

            # Update deployment image to use the specific commit SHA
            kubectl set image deployment/$service-service \
              $service-service=$ECR_REGISTRY/astrofinancial-$service-service:$IMAGE_TAG \
              -n $KUBERNETES_NAMESPACE

            # Wait for rollout to complete
            kubectl rollout status deployment/$service-service -n $KUBERNETES_NAMESPACE --timeout=300s

            echo "✅ $service-service deployed successfully"
          done

      - name: Verify deployment
        run: |
          # Verify market encoder
          kubectl get cronjobs -n $KUBERNETES_NAMESPACE
          kubectl get configmaps -n $KUBERNETES_NAMESPACE
          kubectl get secrets -n $KUBERNETES_NAMESPACE

          # Verify backend services
          kubectl get deployments -l deployment-type=docker -n $KUBERNETES_NAMESPACE
          kubectl get services -l deployment-type=docker -n $KUBERNETES_NAMESPACE
          kubectl get pods -l deployment-type=docker -n $KUBERNETES_NAMESPACE

      - name: Test market encoder manually
        run: |
          # Create a test job from the market encoder cronjob
          kubectl create job --from=cronjob/simple-market-encoder-daily test-$(date +%Y%m%d-%H%M%S) -n $KUBERNETES_NAMESPACE

          # Wait for the job to start
          sleep 15

          # Check job status
          kubectl get jobs -n $KUBERNETES_NAMESPACE

          # Get the test job name
          TEST_JOB=$(kubectl get jobs -n $KUBERNETES_NAMESPACE --sort-by=.metadata.creationTimestamp -o jsonpath="{.items[-1].metadata.name}")

          # Show logs (timeout after 3 minutes)
          timeout 180 kubectl logs -l job-name=$TEST_JOB -n $KUBERNETES_NAMESPACE -f || echo "Job timed out or completed"

          # Final job status
          kubectl get job $TEST_JOB -n $KUBERNETES_NAMESPACE -o yaml

      - name: Test backend services health
        run: |
          # Test health endpoints for backend services
          services=(backfill backtesting recommendation)

          for service in "${services[@]}"; do
            echo "🔍 Testing $service-service health..."

            # Wait for pods to be ready
            kubectl wait --for=condition=Ready pods -l app=$service-service \
              -n $KUBERNETES_NAMESPACE --timeout=300s || echo "⚠️ $service-service not ready yet"

            # Get pod name for health check
            POD_NAME=$(kubectl get pods -l app=$service-service -n $KUBERNETES_NAMESPACE \
              -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

            if [ ! -z "$POD_NAME" ]; then
              echo "✅ $service-service pod $POD_NAME is ready"

              # Determine port
              case $service in
                backfill)
                  PORT=8001
                  ;;
                backtesting)
                  PORT=8000
                  ;;
                recommendation)
                  PORT=8002
                  ;;
              esac

              # Test health endpoint via port-forward
              timeout 30 kubectl port-forward pod/$POD_NAME -n $KUBERNETES_NAMESPACE $PORT:$PORT &
              PORT_FORWARD_PID=$!
              sleep 10

              # Check health endpoint
              if curl -f http://localhost:$PORT/health --max-time 10 --silent; then
                echo "✅ $service-service health check passed"
              else
                echo "⚠️ $service-service health check failed (may still be starting)"
              fi

              # Clean up port forward
              kill $PORT_FORWARD_PID 2>/dev/null || true
            else
              echo "❌ No pod found for $service-service"
            fi
          done

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment to EKS completed successfully"
          echo "✅ Market encoder and backend services deployed"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment to EKS failed"
          exit 1