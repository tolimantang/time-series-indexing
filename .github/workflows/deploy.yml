name: Deploy to EKS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "deploy/**"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  EKS_CLUSTER_NAME: financial-cluster
  ECR_REPOSITORY: market-encoder

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push market encoder image to Amazon ECR
        id: build-market-encoder-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build market encoder image
          docker build -f backend/deploy/docker/market-encoder.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "market-encoder-image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to EKS
        env:
          MARKET_ENCODER_IMAGE: ${{ steps.build-market-encoder-image.outputs.market-encoder-image }}
          # Database secrets
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace time-series-indexing --dry-run=client -o yaml | kubectl apply -f -

          # Create market encoder secrets
          kubectl create secret generic market-encoder-secrets \
            --from-literal=db-host="$DB_HOST" \
            --from-literal=db-name="$DB_NAME" \
            --from-literal=db-user="$DB_USER" \
            --from-literal=db-password="$DB_PASSWORD" \
            --namespace=time-series-indexing \
            --dry-run=client -o yaml | kubectl apply -f -

          # Deploy market encoder cronjob (image tag is already set to latest)
          kubectl apply -f backend/deploy/k8s/market-encoder/simple-market-encoder-cronjob.yaml

      - name: Verify deployment
        run: |
          # Verify market encoder
          kubectl get cronjobs -n time-series-indexing
          kubectl get configmaps -n time-series-indexing
          kubectl get secrets -n time-series-indexing

      - name: Test market encoder manually
        run: |
          # Create a test job from the market encoder cronjob
          kubectl create job --from=cronjob/simple-market-encoder-daily test-$(date +%Y%m%d-%H%M%S) -n time-series-indexing

          # Wait for the job to start
          sleep 15

          # Check job status
          kubectl get jobs -n time-series-indexing

          # Get the test job name
          TEST_JOB=$(kubectl get jobs -n time-series-indexing --sort-by=.metadata.creationTimestamp -o jsonpath="{.items[-1].metadata.name}")

          # Show logs (timeout after 3 minutes)
          timeout 180 kubectl logs -l job-name=$TEST_JOB -n time-series-indexing -f || echo "Job timed out or completed"

          # Final job status
          kubectl get job $TEST_JOB -n time-series-indexing -o yaml

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment to EKS completed successfully"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment to EKS failed"
          exit 1
